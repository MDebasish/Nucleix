getwd()
getwd()
setwd("~/Development/Nucleix")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setClass("ClassName",
slots = list(
x = "numeric",
y = "character"
),
contains = "ParentClass"
)
# ================
# Class definition
# ================
setClass("ParentClass")
setClass("ClassName",
slots = list(
x = "numeric",
y = "character"
),
contains = "ParentClass"
)
CNcreator <- function(x,y,...)
setGeneric("MethodName",
function(x, y, ...) standardGeneric("MethodName"))
setMethod(f="MethodName",
signature = "ClassName",
definition = function(x, y, ...) {
return(paste0(x@x,x@y))
}
)
setMethod(f="MethodName",
signature = "ClassName",
definition = function(x, y, ...) {
return(paste0(x@x,x@y))
}
)
# ================
# Class definition
# ================
setClass("ParentClass")
setClass("ClassName",
slots = list(
x = "numeric",
y = "character"
),
contains = "ParentClass"
)
setClass("ClassName2",
slots = list(
x = "numeric",
y = "character",
z = "numeric"
),
contains = "ParentClass"
)
# ===========
# Constructor
# ===========
CNcreator <- function(x,y,...)
new("ClassName",x=x,y=y)
# ===========
# Getters
# ===========
setGeneric("MethodName",
function(x, y, ...) standardGeneric("MethodName"))
setMethod(f="MethodName",
signature = "ClassName",
definition = function(x, y, ...) {
return(paste0(x@x,x@y))
}
)
setMethod(
f="MethodName",
signature = "ClassName2",
definition = function(x, y, z, ...) {
return(paste0(x@x,x@y,x@z))
}
)
setGeneric("MethodName",
function(x, y, ...) standardGeneric("MethodName"))
setMethod(f="MethodName",
signature = "ClassName",
definition = function(x, y, ...) {
return(paste0(x@x,x@y))
}
)
setMethod(
f="MethodName",
signature = "ClassName2",
definition = function(x, y, z, ...) {
return(paste0(x@x,x@y,x@z))
}
)
# ===========
# show method
#============
setMethod("show", "ClassName",
function(object)
cat(class(object), "instance with", length(object),
"list and elements are", MethodName(object), "\n")
)
# ===============
# validity method
#================
setValidity("ClassName",
function(object){
if (!is.integer(object@x) || !is.character(object@y)) {
return("first Slot should be Interger and seconf character\n")
}
slot_lengths <- c(length(slot(object,"x")),
length(slot(object,"y")))
if (length(unique(slot_lengths)) != 1)
return("lengths of slots 'x', and 'y' differ")
TRUE
})
aa <- CNcreator(1:10,LETTERS[1:10])
View(aa)
show(aa)
print(aa)
slot(aa)
MethodName(aa)
getClass("ClassName")
library(Seurat)
library("SeuratData")
getClass("SeuratData")
getClass("Seurat")
SeuratData::LoadData()
ds<-SeuratData::LoadData()
?LoadData
LoadData(ds, type = "default")
?SeuratData
?Seurat
getClass("SeuratObject")
getClass("Seurat")
getClass("ClassName")
?MethodName
MethodName("ClassName")
showMethods("ClassName")
showMethods("Seurat")
MethodName
showMethods("MethodName")
showMethods("ClassName")
showMethods(class="ClassName")
attr("ClassName")
attr(methods(class="ClassName"), "info")$generic
attr(methods(class="ClassName"), "info")
MethodName
attr(MethodName)
?MethodName
MethodName()
MethodName
showMethods(MethodName)
?showMethods
showClass("ClassName")
getClass("ClassName")
?getMethods
?showClass
attr(methods(class="ClassName"), "info")$generic
attr(methods(class="Seurat"), "info")$generic
Layers()
?Layers
?Assay
isS4(Seurat)
data(ifnb.SeuratData)
data(cbmc.SeuratData)
data("pbmc3k")
InstallData("pbmc3k")
data("pbmc3k")
pbmc3k
UpdateSeuratObject
pbmc3k
?pbmc3k
UpdateSeuratObject(pbmc3k)
isS4(pbmc3k)
showMethods(pbmc3k)
View(pbmc3k)
pbmc3k@tools
pbmc3k@assays
pbmc3k@assays$RNA
pbmc3k@assays$RNA$counts
pbmc3k@assays$RNA$data
str(pbmc3k@assays)
pbmc3k@assays
str(pbmc3k@assays$RNA)
showClass(pbmc3k)
showClass("Seurat")
showClass("Assay")
pbmc3k@assays$RNA$counts
showClass("dgCMatrix")
attr(methods(class="Seurat"), "info")$generic
Command
getS3method('Command','default')
getS4method('Command','default')
getAnywhere('Command')
Seurat:::Command
Seurat::Command
SeuratObject::Command
